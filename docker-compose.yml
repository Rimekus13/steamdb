version: "3.8"

services:
  mongo:
    image: mongo:7
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PWD:-example}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "mongodb://root:example@localhost:27017/admin", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow:
    image: apache/airflow:2.9.2
    container_name: airflow
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    environment:
      # Airflow core
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "sqlite:////opt/airflow/airflow.db"
      AIRFLOW__CORE__EXECUTOR: "SequentialExecutor"

      # Webserver
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
      AIRFLOW__WEBSERVER__WEB_SERVER_HOST: "0.0.0.0"
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "8081"

      # Python path pour importer etl.*
      PYTHONPATH: "/opt/airflow"

      # Variables ETL
      APP_IDS: "${APP_IDS:-3527290}"
      MONGO_DB: "${MONGO_DB:-steamdb}"

      # ⚠️ Étape 1 : utilise root pour tester. Ensuite, remplace par l'user applicatif (voir plus bas).
      MONGO_URI_DOCKER: "${MONGO_URI_DOCKER:-mongodb://root:example@mongo:27017/steamdb?authSource=admin}"

      # (optionnel) timezone
      TZ: "Europe/Paris"
    ports:
      - "8081:8081"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./data:/opt/airflow/data
      - ./.state:/opt/airflow/.state
      # Monte un FICHIER requirements, pas un dossier
      - ./requirements.txt:/opt/airflow/requirements.txt:ro
    command: >
      bash -lc '
        set -e;
        # 1) dépendances
        test -f /opt/airflow/requirements.txt && pip install -r /opt/airflow/requirements.txt || true;
        # 2) DB Airflow
        airflow db init;
        # 3) utilisateur admin (idempotent)
        (airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com) || true;
        # 4) services
        airflow scheduler & exec airflow webserver
      '

volumes:
  mongo_data:
