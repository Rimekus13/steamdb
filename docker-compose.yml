version: "3.9"

name: steamdb

services:
  airflow:
    image: apache/airflow:2.9.2
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW_UID: "${AIRFLOW_UID:-50000}"
      AIRFLOW_GID: "${AIRFLOW_GID:-0}"
      # ETL config (exploitÃ©s par ton code)
      GCP_PROJECT: "${GCP_PROJECT}"
      FIRESTORE_PROJECT: "${FIRESTORE_PROJECT:-${GCP_PROJECT}}"
      GCS_BUCKET: "${GCS_BUCKET}"
      APP_IDS_FILE: "${APP_IDS_FILE:-/opt/airflow/apps.txt}"
      PYTHONPATH: "/opt/airflow:/opt/airflow/etl:/opt/airflow/dashboard"
    ports:
      - "${AIRFLOW_PORT:-8081}:8081"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./dashboard:/opt/airflow/dashboard
      - ./logs:/opt/airflow/logs
      - ./apps.txt:/opt/airflow/apps.txt:ro
      - ./requirements.txt:/opt/airflow/requirements.txt:ro
    
    command:
      - bash
      - -lc
      - |
          set -euo pipefail
          python -V
          pip install --no-cache-dir -r /opt/airflow/requirements.txt
          airflow db migrate
          # create admin/admin (idempotent: ignore error if it exists)
          airflow users create \
            --username "admin" \
            --firstname "Admin" \
            --lastname  "Admin" \
            --role      "Admin" \
            --email     "admin@example.com" \
            --password  "admin" || true
          # start scheduler then webserver
          airflow scheduler &
          exec airflow webserver --port 8081

    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8081/health | grep -q healthy"]
      interval: 20s
      timeout: 5s
      retries: 15

  streamlit:
    image: python:3.12-slim
    restart: unless-stopped
    env_file:
      - .env
    environment:
      GCP_PROJECT: "${GCP_PROJECT}"
      FIRESTORE_PROJECT: "${FIRESTORE_PROJECT:-${GCP_PROJECT}}"
      GCS_BUCKET: "${GCS_BUCKET}"
      PYTHONUNBUFFERED: "1"
    working_dir: /app
    volumes:
      - ./dashboard:/app
      - ./requirements.txt:/app/requirements.txt:ro
    command: >
      bash -lc "
        set -euo pipefail &&
        python -V &&
        pip install --no-cache-dir -r /app/requirements.txt streamlit &&
        exec streamlit run app.py --server.port ${STREAMLIT_PORT:-8501} --server.address 0.0.0.0
      "
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    depends_on:
      - airflow
