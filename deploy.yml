name: Deploy to VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        env:                       # variables injectées depuis secrets
          APP_DIR: /steamdb
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET:  ${{ secrets.GCS_BUCKET }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}   # <-- AJOU
          port: 22
          envs: APP_DIR,GCP_PROJECT,GCS_BUCKET   # exportées vers la session SSH
          script_stop: true
          script: |
            set -eu
            echo "[INFO] Vars on remote:"
            echo "  APP_DIR=${APP_DIR-<empty>}"
            echo "  GCP_PROJECT=${GCP_PROJECT-<empty>}"
            echo "  GCS_BUCKET=${GCS_BUCKET-<empty>}"

            # Définir les valeurs (avec fallback si besoin)
            APP_DIR="${APP_DIR:-/steamdb}"
            GCP_PROJECT="${GCP_PROJECT:-}"
            GCS_BUCKET="${GCS_BUCKET:-}"
            FIRESTORE_PROJECT="${FIRESTORE_PROJECT:-$GCP_PROJECT}"

            [ -n "$GCP_PROJECT" ] || { echo "[ERROR] GCP_PROJECT manquant"; exit 1; }
            [ -n "$GCS_BUCKET" ]  || { echo "[ERROR] GCS_BUCKET manquant";  exit 1; }

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Génération du fichier .env
            {
              echo "GCP_PROJECT=$GCP_PROJECT"
              echo "GCS_BUCKET=$GCS_BUCKET"
              echo "FIRESTORE_PROJECT=$FIRESTORE_PROJECT"
              echo "AIRFLOW_PORT=8081"
              echo "STREAMLIT_PORT=8501"
            } > .env
            echo "[INFO] .env:"; cat .env

            # Vérifier Docker Compose
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "[INFO] Installing docker compose plugin..."
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
              DC="docker compose"
            fi

            # Déploiement
            $DC pull || true
            $DC down || true
            $DC up -d
            $DC ps

            # Airflow: unpause + trigger DAG
            sleep 10
            $DC exec -T airflow airflow dags unpause steam_etl_gcp || true
            $DC exec -T airflow airflow dags trigger steam_etl_gcp || true

            echo "[INFO] Airflow logs (last 100)"
            $DC logs --tail=100 airflow || true
