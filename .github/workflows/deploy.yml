name: Deploy to VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Définis les variables à partir des secrets ICI
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:                                  # <- côté GitHub
          APP_DIR: /steamdb
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET:  ${{ secrets.GCS_BUCKET }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}         # clé privée CI/CD (multiligne)
          port: 22
          envs: APP_DIR,GCP_PROJECT,GCS_BUCKET  # <- export vers la VM
          script_stop: true
          script: |
            #!/bin/sh
            # Pas de "set -e" pour ne pas casser les tests de variables

            echo "[INFO] Variables reçues sur la VM:"
            echo "  APP_DIR=${APP_DIR-<empty>}"
            echo "  GCP_PROJECT=${GCP_PROJECT-<empty>}"
            echo "  GCS_BUCKET=${GCS_BUCKET-<empty>}"

            # Fallbacks + contrôles *robustes* (POSIX)
            [ -n "${APP_DIR:-}" ] || APP_DIR="/steamdb"
            if [ -z "${GCP_PROJECT:-}" ]; then echo "[ERROR] GCP_PROJECT manquant"; exit 1; fi
            if [ -z "${GCS_BUCKET:-}" ];  then echo "[ERROR] GCS_BUCKET manquant";  exit 1; fi

            mkdir -p "$APP_DIR"
            cd "$APP_DIR" || { echo "[ERROR] APP_DIR introuvable"; exit 1; }

            # Écrire .env
            cat > .env <<EOF
            GCP_PROJECT=${GCP_PROJECT}
            GCS_BUCKET=${GCS_BUCKET}
            FIRESTORE_PROJECT=${FIRESTORE_PROJECT:-${GCP_PROJECT}}
            AIRFLOW_PORT=8081
            STREAMLIT_PORT=8501
            EOF

            echo "[INFO] .env écrit :"
            cat .env

            # Docker Compose présent ?
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "[INFO] Installation docker compose plugin…"
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
              DC="docker compose"
            fi

            $DC pull || true
            $DC down || true
            $DC up -d
            $DC ps

            # Airflow: unpause + trigger (ignorer si le service n'existe pas)
            sleep 10
            $DC exec -T airflow airflow dags unpause steam_etl_gcp || true
            $DC exec -T airflow airflow dags trigger steam_etl_gcp || true

            echo "[INFO] Airflow logs (last 100)"
            $DC logs --tail=100 airflow || true
