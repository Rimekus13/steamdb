name: Deploy to VM

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}          # ta clé privée CI/CD
          port: 22
          # On passe explicitement les variables côté VM :
          envs: APP_DIR,GCP_PROJECT,GCS_BUCKET,GCP_SA_KEY_B64
          script_stop: true
          script: |
            set -eu

            # === Paramètres côté VM ===
            APP_DIR="${APP_DIR:-/steamdb}"   # <-- ton projet est dans /steamdb
            GCP_PROJECT="${GCP_PROJECT:-}"
            GCS_BUCKET="${GCS_BUCKET:-}"
            FIRESTORE_PROJECT="${FIRESTORE_PROJECT:-$GCP_PROJECT}"

            # Vérifs lisibles (échoue proprement si manquant)
            [ -n "$GCP_PROJECT" ] || { echo "[ERROR] GCP_PROJECT manquant"; exit 1; }
            [ -n "$GCS_BUCKET" ]  || { echo "[ERROR] GCS_BUCKET manquant";  exit 1; }

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # .env
            {
              echo "GCP_PROJECT=$GCP_PROJECT"
              echo "GCS_BUCKET=$GCS_BUCKET"
              echo "FIRESTORE_PROJECT=$FIRESTORE_PROJECT"
              echo "AIRFLOW_PORT=8081"
              echo "STREAMLIT_PORT=8501"
            } > .env
            echo "[INFO] .env:"
            cat .env

            # Clé de service (option : base64 dans secret GCP_SA_KEY_B64)
            if [ -n "${GCP_SA_KEY_B64:-}" ]; then
              echo "$GCP_SA_KEY_B64" | base64 -d > gcp-sa.json
              chmod 600 gcp-sa.json
              echo "[INFO] gcp-sa.json created"
            fi

            # Docker Compose (installe si absent)
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "[INFO] Installing docker compose plugin..."
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
              DC="docker compose"
            fi

            $DC pull || true
            $DC down || true
            $DC up -d
            $DC ps

            # Airflow: unpause + trigger (nom DAG à adapter si besoin)
            sleep 10
            $DC exec -T airflow airflow dags unpause steam_etl_gcp || true
            $DC exec -T airflow airflow dags trigger steam_etl_gcp || true

            echo "[INFO] Airflow logs (last 100)"
            $DC logs --tail=100 airflow || true
 