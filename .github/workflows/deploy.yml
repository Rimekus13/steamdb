name: Deploy to GCE VM

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_DIR: /home/steamdb_ynov/steamdb
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
      FIRESTORE_PROJECT: ${{ secrets.FIRESTORE_PROJECT }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare target folder (own & clean)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          envs: APP_DIR
          script: |
            set -euo pipefail
            APP_DIR="${APP_DIR:-$HOME/steamdb}"
            echo "[INFO] Preparing ${APP_DIR} on $(hostname) as $(whoami)"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R "$(whoami):$(whoami)" "$APP_DIR"
            rm -rf "$APP_DIR/.git"
            find "$APP_DIR" -mindepth 1 -maxdepth 1 -not -name "data" -exec rm -rf {} +
            mkdir -p "$APP_DIR"

      - name: Upload project to VM (no .git)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          target: "${{ env.APP_DIR }}"
          overwrite: true
          source: |
            docker-compose.yml
            requirements.txt
            apps.txt
            dags
            etl
            streamlit

      - name: Deploy and trigger
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          command_timeout: 60m
          envs: APP_DIR,GCP_PROJECT,GCS_BUCKET,FIRESTORE_PROJECT,GCP_SA_KEY
          script: |
            set -euo pipefail
            APP_DIR="${APP_DIR:-$HOME/steamdb}"
            cd "$APP_DIR"

            # Fallback Firestore -> GCP_PROJECT si non fourni
            if [ -z "${FIRESTORE_PROJECT:-}" ]; then
              FIRESTORE_PROJECT="$GCP_PROJECT"
            fi

            # Ecrire .env pour docker compose
            cat > .env <<EOF
GCP_PROJECT=${GCP_PROJECT}
GCS_BUCKET=${GCS_BUCKET}
FIRESTORE_PROJECT=${FIRESTORE_PROJECT}
AIRFLOW_PORT=8081
STREAMLIT_PORT=8501
EOF
            echo "[INFO] .env written"
            cat .env

            # Déposer la clé de service (optionnelle)
            if [ -n "${GCP_SA_KEY:-}" ]; then
              echo "${GCP_SA_KEY}" > gcp-sa.json
              chmod 600 gcp-sa.json
              echo "[INFO] gcp-sa.json created"
            fi

            # Installer Docker si absent
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker "$(whoami)" || true
            fi

            # Installer docker-compose v2 standalone si besoin
            if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then
              COMPOSE_VERSION="v2.28.1"
              sudo curl -fsSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Choisir la bonne commande compose
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            else
              DC="docker-compose"
            fi

            # (Re)lancer
            $DC pull || true
            $DC down || true
            $DC up -d
            $DC ps

            # Trigger Airflow
            sleep 10
            $DC exec -T airflow airflow dags unpause steam_etl_gcp || true
            $DC exec -T airflow airflow dags trigger steam_etl_gcp || true

            echo "[INFO] Tail airflow logs (last 100 lines)"
            $DC logs --tail=100 airflow || true
